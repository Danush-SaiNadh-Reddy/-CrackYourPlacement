class Solution {
public: 
    int solve(int n,vector<int>&prices,int buy,int i,vector<vector<int>>&dp)
    {  
        if(i==n)
            return 0; 
        if(dp[i][buy]!=-1)
            return dp[i][buy];
        int profit=0;
        if(buy==1)
        {
            profit=max(-prices[i]+solve(n,prices,0,i+1,dp),0+solve(n,prices,1,i+1,dp));
            
        } 
        else
            profit=max(prices[i]+solve(n,prices,1,i+1,dp),0+solve(n,prices,0,i+1,dp));
        return dp[i][buy]=profit;
    }
    int maxProfit(vector<int>& prices) {  
        int n=prices.size();
       vector<int>prev(2,0);
       vector<int>curr(2,0);
        for(int i=n-1;i>=0;i--) 
        {
            for(int buy=0;buy<=1;buy++)
            {
                int profit=0;
                if(buy==1)
                profit=max(-prices[i]+prev[0],0+prev[1]);
                else
                profit=max(prices[i]+prev[1],0+prev[0]); 
                
                curr[buy]=profit;
            } 
            prev=curr;
        }
            
        
        
        return prev[1];
    }
};
